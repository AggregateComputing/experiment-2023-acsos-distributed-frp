incarnation: protelis

variables:
  seed: &seed
    min: 0
    max: 1
    step: 1
    default: 0
  spacing: &spacing
    type: ArbitraryVariable
    parameters: [0.5, [0.25, 0.5]]
  error: &error
    type: ArbitraryVariable
    parameters: [0.1, [0.1, 0.2]]

seeds:
  scenario: *seed
  simulation: *seed

environment:
  type: Continuous2DEnvironment
  parameters: []

_program: &program
  - time-distribution: 1
    # Writing Protelis programs within a YAML file is a bad experience
    # (some characters need escaping, no syntax highlight, no code suggestions...)
    # We recommend using the Protelis Eclipse plugin to write your code, then
    # Loading the code as a module within Alchemist
    # In order to run this example, make sure that src/main/protelis is part of
    # your classpath (the Gradle script is already properly configured).
    program: >
      import protelis:coord:spreading
      let result = if(env.get("obstacle")) { false } else { channel(env.get("source"), env.get("destination"), 0.1) }
      env.put("root", result)
      result

  - program: send

network-model:
  type: ConnectWithinDistance
  parameters: [0.75]
deployments:
  type: Grid
  parameters: [-5, -5, 5, 5, *spacing, *spacing, *error, *error]
  contents:
    - molecule: source
      concentration: false
    - molecule: obstacle
      concentration: false
    - molecule: destination
      concentration: false
    - in:
        type: Rectangle
        parameters: [ -6, -6, 2, 2 ]
      molecule: source
      concentration: true
    - in:
        type: Rectangle
        parameters: [ 3, 3, 3, 3 ]
      molecule: destination
      concentration: true
    - in:
        type: Rectangle
        parameters: [ -4, -1, 8, 2 ]
      molecule: obstacle
      concentration: true
  programs: *program
